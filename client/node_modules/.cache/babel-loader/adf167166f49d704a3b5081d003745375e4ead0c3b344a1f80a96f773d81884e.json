{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevMate\\\\client\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { socket } from \"../socket\";\nimport { useAuth } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport function useNotification() {\n  _s();\n  return useContext(NotificationContext);\n}\n_s(useNotification, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function NotificationProvider({\n  children\n}) {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch notifications on mount and when user changes\n  useEffect(() => {\n    if (!user) return;\n    setLoading(true);\n    axios.get(\"/api/notifications\").then(res => {\n      setNotifications(res.data);\n      setLoading(false);\n    }).catch(() => {\n      setNotifications([]);\n      setLoading(false);\n    });\n  }, [user]);\n\n  // Real-time notifications\n  useEffect(() => {\n    if (!user) return;\n    socket.io.opts.query = {\n      userId: user.id\n    };\n    socket.connect();\n    socket.on(\"notification\", notification => {\n      setNotifications(prev => [notification, ...prev]);\n    });\n    return () => {\n      socket.off(\"notification\");\n      socket.disconnect();\n    };\n  }, [user]);\n\n  // Mark all as read\n  const markAllAsRead = useCallback(async () => {\n    await axios.put(\"/api/notifications/mark-all-read\");\n    setNotifications(prev => prev.map(n => ({\n      ...n,\n      read: true\n    })));\n  }, []);\n\n  // Delete all\n  const deleteAll = useCallback(async () => {\n    await axios.delete(\"/api/notifications/all\");\n    setNotifications([]);\n  }, []);\n  const hasUnread = notifications.some(n => !n.read);\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      setNotifications,\n      loading,\n      hasUnread,\n      markAllAsRead,\n      deleteAll\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s2(NotificationProvider, \"iJiobRur9xc/v5JnCF1YOjo1528=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","socket","useAuth","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","NotificationProvider","children","_s2","user","notifications","setNotifications","loading","setLoading","get","then","res","data","catch","io","opts","query","userId","id","connect","on","notification","prev","off","disconnect","markAllAsRead","put","map","n","read","deleteAll","delete","hasUnread","some","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DevMate/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { socket } from \"../socket\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport function useNotification() {\r\n  return useContext(NotificationContext);\r\n}\r\n\r\nexport function NotificationProvider({ children }) {\r\n  const { user } = useAuth();\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch notifications on mount and when user changes\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    setLoading(true);\r\n    axios.get(\"/api/notifications\").then(res => {\r\n      setNotifications(res.data);\r\n      setLoading(false);\r\n    }).catch(() => {\r\n      setNotifications([]);\r\n      setLoading(false);\r\n    });\r\n  }, [user]);\r\n\r\n  // Real-time notifications\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    socket.io.opts.query = { userId: user.id };\r\n    socket.connect();\r\n    socket.on(\"notification\", (notification) => {\r\n      setNotifications(prev => [notification, ...prev]);\r\n    });\r\n    return () => {\r\n      socket.off(\"notification\");\r\n      socket.disconnect();\r\n    };\r\n  }, [user]);\r\n\r\n  // Mark all as read\r\n  const markAllAsRead = useCallback(async () => {\r\n    await axios.put(\"/api/notifications/mark-all-read\");\r\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\r\n  }, []);\r\n\r\n  // Delete all\r\n  const deleteAll = useCallback(async () => {\r\n    await axios.delete(\"/api/notifications/all\");\r\n    setNotifications([]);\r\n  }, []);\r\n\r\n  const hasUnread = notifications.some(n => !n.read);\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, setNotifications, loading, hasUnread, markAllAsRead, deleteAll }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}