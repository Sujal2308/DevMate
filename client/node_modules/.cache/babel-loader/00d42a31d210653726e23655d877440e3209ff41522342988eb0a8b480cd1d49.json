{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevMate\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n\n  // Set axios default auth header\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common[\"Authorization\"];\n    }\n  }, [token]);\n\n  // Check for existing user on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get(\"/api/auth/me\");\n          setUser(response.data);\n        } catch (error) {\n          console.error(\"Auth check failed:\", error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(\"/api/auth/login\", {\n        email,\n        password\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      localStorage.setItem(\"token\", newToken);\n      setToken(newToken);\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response3$data, _error$response4, _error$response5, _error$response5$data;\n      let errorMessage = \"Login failed\";\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 503) {\n        errorMessage = \"Database not connected. Please ensure MongoDB is running and try again.\";\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) === \"DATABASE_NOT_CONNECTED\") {\n        errorMessage = \"Database connection required. Please start MongoDB service.\";\n      } else if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n        errorMessage = error.response.data.message;\n      }\n      return {\n        success: false,\n        error: errorMessage,\n        isDBError: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 503 || ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) === \"DATABASE_NOT_CONNECTED\"\n      };\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await axios.post(\"/api/auth/register\", {\n        username,\n        email,\n        password\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      localStorage.setItem(\"token\", newToken);\n      setToken(newToken);\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response7$data, _error$response8, _error$response8$data, _error$response9, _error$response0, _error$response0$data;\n      let errorMessage = \"Registration failed\";\n      if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 503) {\n        errorMessage = \"Database not connected. Please ensure MongoDB is running and try again.\";\n      } else if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) === \"DATABASE_NOT_CONNECTED\") {\n        errorMessage = \"Database connection required. Please start MongoDB service.\";\n      } else if ((_error$response8 = error.response) !== null && _error$response8 !== void 0 && (_error$response8$data = _error$response8.data) !== null && _error$response8$data !== void 0 && _error$response8$data.message) {\n        errorMessage = error.response.data.message;\n      }\n      return {\n        success: false,\n        error: errorMessage,\n        isDBError: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 503 || ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) === \"DATABASE_NOT_CONNECTED\"\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n    setUser(null);\n    delete axios.defaults.headers.common[\"Authorization\"];\n  };\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateUser,\n    loading,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"57w/r0xt4hR+eEL4wHMv3LgVq+Q=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","defaults","headers","common","checkAuth","response","get","data","error","console","logout","login","email","password","post","newToken","userData","setItem","success","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response3$data","_error$response4","_error$response5","_error$response5$data","errorMessage","status","message","isDBError","register","username","_error$response6","_error$response7","_error$response7$data","_error$response8","_error$response8$data","_error$response9","_error$response0","_error$response0$data","removeItem","updateUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DevMate/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n\r\n  // Set axios default auth header\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n  }, [token]);\r\n\r\n  // Check for existing user on mount\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      if (token) {\r\n        try {\r\n          const response = await axios.get(\"/api/auth/me\");\r\n          setUser(response.data);\r\n        } catch (error) {\r\n          console.error(\"Auth check failed:\", error);\r\n          logout();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post(\"/api/auth/login\", { email, password });\r\n      const { token: newToken, user: userData } = response.data;\r\n\r\n      localStorage.setItem(\"token\", newToken);\r\n      setToken(newToken);\r\n      setUser(userData);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = \"Login failed\";\r\n\r\n      if (error.response?.status === 503) {\r\n        errorMessage =\r\n          \"Database not connected. Please ensure MongoDB is running and try again.\";\r\n      } else if (error.response?.data?.error === \"DATABASE_NOT_CONNECTED\") {\r\n        errorMessage =\r\n          \"Database connection required. Please start MongoDB service.\";\r\n      } else if (error.response?.data?.message) {\r\n        errorMessage = error.response.data.message;\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: errorMessage,\r\n        isDBError:\r\n          error.response?.status === 503 ||\r\n          error.response?.data?.error === \"DATABASE_NOT_CONNECTED\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      const response = await axios.post(\"/api/auth/register\", {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n      const { token: newToken, user: userData } = response.data;\r\n\r\n      localStorage.setItem(\"token\", newToken);\r\n      setToken(newToken);\r\n      setUser(userData);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = \"Registration failed\";\r\n\r\n      if (error.response?.status === 503) {\r\n        errorMessage =\r\n          \"Database not connected. Please ensure MongoDB is running and try again.\";\r\n      } else if (error.response?.data?.error === \"DATABASE_NOT_CONNECTED\") {\r\n        errorMessage =\r\n          \"Database connection required. Please start MongoDB service.\";\r\n      } else if (error.response?.data?.message) {\r\n        errorMessage = error.response.data.message;\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: errorMessage,\r\n        isDBError:\r\n          error.response?.status === 503 ||\r\n          error.response?.data?.error === \"DATABASE_NOT_CONNECTED\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n    setUser(null);\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}